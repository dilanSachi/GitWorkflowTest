# This is a basic workflow to help you get started with Actions

name: DeletePackages

# Controls when the action will run. 
on: 
  workflow_dispatch:
      inputs:
        owner:
          description: 'Repo Owner'     
          required: true
          default: 'ballerina-platform'
        repo:
          description: 'Repository'     
          required: true
          default: 'ballerina-lang'
        package:
          description: 'Specific package'
          required: true
        version:
          description: 'Package version'
          required: true

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  delete:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2.1.0
      - name: Show username
        run: echo ${{github.actor}}
      - name: Read access list
        run: "cat ./.github/workflows/UsersWithPackageDeletionAccess.json | jq -r '.usernames[]|select(.username==\"${{github.actor}}\").username' > /tmp/auth-user.json"
      - name: Set authorized username
        id: setUname
        run: printf "::set-output name=foundUname::%s" $(cat /tmp/auth-user.json)
      - name: Get package version ids
#        if: steps.setUname.outputs.foundUname != ''
        run: |
          curl -H "Authorization: bearer ${{ secrets.GITHUB_TOKEN }}" -X POST -d '{"query":"query{organization(login:\"ballerina-platform\"){repository(name:\"${{ github.event.inputs.repo }}\"){packages(names:\"${{ github.event.inputs.package }}\",first:1){edges{node{version(version:\"${{ github.event.inputs.version }}\"){id}}}}}}}"}' --url https://api.github.com/graphql -o /tmp/version-ids.json
      - name: Display data
        run: "cat /tmp/version-ids.json"
      - name: Filter packages
        if: steps.setUname.outputs.foundUname != ''
        run: "cat /tmp/version-ids.json | jq -r '.data.organization.repository.packages.edges[0].node.version.id' > /tmp/version-id.json"
      - name: Show Selected Package
        run: "cat /tmp/version-ids.json"
      - name: Set version ID
        id: setid
#        if: steps.setUname.outputs.foundUname != ''
        run: printf "::set-output name=versionId::%s" $(cat /tmp/version-ids.json)
      - name: show in screen
        run: "echo ${{steps.setid.outputs.versionId}}"
